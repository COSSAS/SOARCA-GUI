package cards

import (
	"fmt"
	"soarca-gui/views/components/icons"
)

const (
	reportingMetricSectionEndpoint = "/reporting/metrics"
)

type ReportingCardData struct {
	ID    string
	Name  string
	Value int
	Color string
}

var initialCards = []ReportingCardData{
	{ID: "1"},
	{ID: "2"},
	{ID: "3"}}

templ ReportingCard(card ReportingCardData) {
	@Card() {
		<div class="col-span-12 sm:col-span-6 md:col-span-3">
			<div class="flex flex-row bg-white shadow-sm rounded p-4">
				<div class="flex items-center justify-center flex-shrink-0 h-12 w-12 rounded-xl bg-blue-100 text-blue-600">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-play"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>
				</div>
				<div class="flex flex-col flex-grow ml-4">
					<div class="text-sm text-gray-500">Executed Playbooks</div>
					<div class="font-bold text-lg"></div>
				</div>
			</div>
		</div>
	}
}

templ reportingCardUnkown(card ReportingCardData) {
	@Card() {
		<div class="col-span-12 sm:col-span-6 md:col-span-3">
			<div class="flex flex-row bg-white shadow-sm rounded p-4">
				<div class="flex items-center justify-center flex-shrink-0 h-12 w-12 rounded-xl bg-red-100 text-red-600">
					@icons.NewIcon("x").InsertIcon("")
				</div>
				<div class="flex flex-col flex-grow ml-4">
					<div class="text-sm text-gray-500">Could not load</div>
					<div class="font-bold text-lg">None</div>
				</div>
			</div>
		</div>
	}
}

templ ReportingMetricCards() {
	<div class="grid grid-cols-3 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4">
		for _, card := range initialCards {
			@ReportingCard(card)
		}
	</div>
}

templ reportingUnkownCards() {
	<div class="grid grid-cols-3 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-3 gap-4">
		for _, card := range initialCards {
			@reportingCardUnkown(card)
		}
	</div>
}

templ ReportingMetricsSection() {
	<div
		hx-get={ string(templ.URL(fmt.Sprintf(reportingMetricSectionEndpoint))) }
		hx-trigger="load, every 1s"
		hx-swap="innerHTML"
		hx-target="#reportingmetrics"
		hx-on::after-request="feather.replace()"
	></div>
	<div id="reportingmetrics">
		@reportingUnkownCards()
	</div>
}
