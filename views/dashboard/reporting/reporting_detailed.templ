package reporting

import (
	"encoding/json"
	"fmt"
	"soarca-gui/models/reporter"
	"soarca-gui/utils"
	"soarca-gui/views/components/cards"
	"soarca-gui/views/components/indicators"
	"soarca-gui/views/layouts"
	"strings"
	"time"
)

templ ReportingDetailedView(executionReport reporter.PlaybookExecutionReport) {
	@layouts.DashboardLayout() {
		@headersection() {
		}
		@section() {
			@generalPlaybookCardInfo(executionReport)
			@actionStepResultsCards(executionReport.StepResults)
		}
	}
}

templ headersection() {
	<div class="max-w-4xl mx-auto">
		@cards.Card(utils.Class("relative bg-gradient-to-r from-blue-600 to-fuchsia-500 shadow-md rounded-lg p-2 mb-2")) {
			<button onclick="history.back()" class="flex items-center justify-center w-1/2 px-5 py-2 text-sm text-gray-700 transition-colors duration-200 bg-white border rounded-lg gap-x-2 sm:w-auto dark:hover:bg-gray-800 dark:bg-gray-900 hover:bg-gray-100 dark:text-gray-200 dark:border-gray-700">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 rtl:rotate-180">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18"></path>
				</svg>
				<span>Go back</span>
			</button>
		}
	</div>
}

templ section() {
	<div class="max-w-4xl mx-auto">
		@cards.Card(utils.Class("relative bg-white shadow-md rounded-lg p-6 mb-6")) {
			{ children... }
		}
	</div>
}

templ generalPlaybookCardInfo(executionReport reporter.PlaybookExecutionReport) {
	@statusIndicator(executionReport.Status)
	<span class="text-md font-bold text-gray-800 mb-8">Playbook:</span>
	<span>{ "remove malware" }</span>
	<hr class="mt-2"/>
	<div class="mb-6">
		<table class="table-auto text-sm text-gray-600">
			<tbody>
				<tr>
					<th class="font-semibold text-left pr-4">Playbook Execution ID:</th>
					<td>{ executionReport.ExecutionId }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Started:</th>
					<td>{ executionReport.Started.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Ended:</th>
					<td>{ executionReport.Ended.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Duration:</th>
					<td>{ formatDuration(executionReport.Started, executionReport.Ended) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Status:</th>
					<td>{  executionReport.StatusText }</td>
				</tr>
			</tbody>
		</table>
	</div>
}

templ statusIndicator(status string) {
	<div class="absolute top-0 right-0 p-2">
		@indicators.ReportingStatusTag(status)
	</div>
}

templ expander() {
	<div x-data="{ reportsOpen: false }">
		<div @click="reportsOpen = !reportsOpen" class="flex items-center text-gray-600 w-full border-b overflow-hidden mt-32 md:mt-0 mb-5 mx-auto">
			<div class="w-10 border-r px-2 transform transition duration-300 ease-in-out" :class="{'rotate-90': reportsOpen,' -translate-y-0.0': !reportsOpen }">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
				</svg>
			</div>
			<div class="flex items-center px-2">
				<div class="mx-3">
					<button class="hover:underline">See more details</button>
				</div>
			</div>
		</div>
		<div
			class="flex md:p-0 w-full transform transition duration-300 ease-in-out border-b"
			x-cloak
			x-show="reportsOpen"
			x-collapse
			x-collapse.duration.500ms
		>
			{ children... }
		</div>
	</div>
}

templ expandStepResultCard(stepResult reporter.StepExecutionReport) {
	<div class="mb-6">
		<div class="bg-gray-100 p-2 rounded-lg mt-2 overflow-x-auto">
			<pre class="text-xs bg-gray-200 p-2 rounded-md">
				<code class="language-json">
					{ formatVariable(stepResult) }
				</code>
			</pre>
		</div>
	</div>
}

templ actionStepResultCard(executionId string, stepResult reporter.StepExecutionReport) {
	<div class="relative bg-gray-50 border rounded-lg p-4 mb-4">
		@statusIndicator(stepResult.Status)
		<span class="text-md font-bold text-gray-800 mb-8">Action Name:</span>
		<span>{ executionId }</span>
		<hr class="mt-2"/>
		<table class="table-auto text-sm text-gray-600">
			<tbody>
				<tr>
					<th class="font-semibold text-left pr-4">Execution ID:</th>
					<td>{ executionId }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Started:</th>
					<td>{ stepResult.Started.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Ended:</th>
					<td>{ stepResult.Ended.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Status:</th>
					<td>{ stepResult.StatusText }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Executed by:</th>
					<td>{ stepResult.ExecutedBy }</td>
				</tr>
			</tbody>
		</table>
		<hr class="mt-2"/>
		{ children... }
	</div>
}

templ actionStepResultsCards(stepResults map[string]reporter.StepExecutionReport) {
	@cards.Card(utils.Class("bg-blue-200 p-4 rounded-lg")) {
		<p class="text-sm text-blue-600 mb-2">Found: { fmt.Sprint(len(stepResults)) } actions </p>
		for executionId, _ := range stepResults {
			@actionStepResultCard(executionId, stepResults[executionId]) {
				@expander() {
					@expandStepResultCard(stepResults[executionId])
				}
			}
		}
	}
}

func formatVariable(stepResult reporter.StepExecutionReport) string {

	indentedJSON, err := json.MarshalIndent(stepResult.Variables, "", "  ")
	if err != nil {
		return "failed to parse variable correctly for step action"
	}
	formattedJSON := strings.ReplaceAll(string(indentedJSON), "\\n", "")
	return formattedJSON
}

func formatDuration(t1 time.Time, t2 time.Time) string {

	duration := t1.Sub(t2)

	if duration.Seconds() >= 0 {
		return duration.Round(time.Millisecond).String()
	} else {
		return ""
	}

}
