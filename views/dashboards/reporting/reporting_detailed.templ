package reporting

import (
	"encoding/json"
	"fmt"
	"soarca-gui/models/cacao"
	"soarca-gui/models/reporter"
	"soarca-gui/utils"
	"soarca-gui/views/components/alerts"
	"soarca-gui/views/components/cards"
	"soarca-gui/views/components/icons"
	"soarca-gui/views/components/indicators"
	"soarca-gui/views/layouts"
	"time"
)

templ ReportingDetailedView(executionReport reporter.PlaybookExecutionReport) {
	@layouts.DashboardLayout() {
		@headersection()
		@section(executionReport) {
			@playbookInfoCard(executionReport)
			@actionStepInfoCards(executionReport.StepResults)
		}
	}
}

templ ReportingDetailedView404(errors utils.Errors) {
	@layouts.DashboardLayout() {
		@headersection()
		@section404(errors)
	}
}

templ section404(errors utils.Errors) {
	@cards.Card(utils.Class("relative shadow-lg rounded-lg p-6 mb-6")) {
		<span class="text-md font-bold text-gray-800 mb-8">Not Found: </span>
		<span>error occured</span>
		<hr class="mt-2"/>
		if errors.Has("backend") {
			<div class="mt-2">
				@alerts.ErrorAlert(errors.Get("backend").Error())
			</div>
		}
	}
}

templ headersection() {
	@cards.Card(utils.Class("relative bg-gradient-to-r from-blue-600 to-fuchsia-500 shadow-md rounded-lg p-2 mb-1")) {
		<div clas="h-10 flex items-center justify-center ">
			<button onclick="history.back()" class="flex items-center justify-center w-1/2 px-5 py-2 text-sm text-gray-700 transition-colors duration-200 bg-white border rounded-lg gap-x-2 sm:w-auto dark:hover:bg-gray-800 dark:bg-gray-900 hover:bg-gray-100 dark:text-gray-200 dark:border-gray-700">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-4 rtl:rotate-180">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18"></path>
				</svg>
				<span>Go back</span>
			</button>
		</div>
	}
}

templ section(executionReport reporter.PlaybookExecutionReport) {
	@cards.Card(utils.Class("relative shadow-lg rounded-lg p-6 mb-6"), reportingShadowColorStatus(executionReport.Status)) {
		{ children... }
	}
}

templ playbookInfoCard(executionReport reporter.PlaybookExecutionReport) {
	@statusIndicator(executionReport.Status)
	<span class="text-md font-bold text-gray-800 mb-8">Playbook:</span>
	<span>{ executionReport.ExecutionId }</span>
	<hr class="mt-2"/>
	<div class="mb-6">
		<table class="table-auto text-sm text-gray-600">
			<tbody>
				<tr>
					<th class="font-semibold text-left pr-4">Execution ID:</th>
					<td>{ executionReport.ExecutionId }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Started:</th>
					<td>{ executionReport.Started.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Ended:</th>
					<td>{ executionReport.Ended.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Duration:</th>
					<td>{ formatDuration(executionReport.Started, executionReport.Ended) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Status:</th>
					<td>{  executionReport.StatusText }</td>
				</tr>
			</tbody>
		</table>
	</div>
}

templ statusIndicator(status string) {
	<div class="absolute top-0 right-0 p-2 pr-4">
		@indicators.ReportingStatusTag(status)
	</div>
}

templ expander() {
	<div x-data="{ reportsOpen: false }">
		<div @click="reportsOpen = !reportsOpen" class="flex items-center text-gray-600 w-full border-b overflow-hidden mt-32 md:mt-0 mb-5 mx-auto">
			<div class="w-10 border-r px-2 transform transition duration-300 ease-in-out" :class="{'rotate-90': reportsOpen,' -translate-y-0.0': !reportsOpen }">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
				</svg>
			</div>
			<div class="flex items-center px-2">
				<div class="mx-3">
					<button class="hover:underline">See more details</button>
				</div>
			</div>
		</div>
		<div
			class="flex md:p-0 w-full transform transition duration-300 ease-in-out border-b"
			x-cloak
			x-show="reportsOpen"
			x-collapse
			x-collapse.duration.500ms
		>
			{ children... }
		</div>
	</div>
}

templ expandActionInfoCard(stepResults reporter.StepExecutionReport) {
	<div class="mb-6">
		<div class="bg-gray-100 p-2 rounded-lg mt-2 overflow-x-auto">
			if len(stepResults.Variables ) > 0 {
				for name, stepResult := range stepResults.Variables {
					@formatCacaoVariables(name, stepResult)
				}
			} else {
				@alerts.WarningAlert("No Cacao Variable found")
			}
		</div>
	</div>
}

templ formatCacaoVariables(name string, result cacao.Variable) {
	<div class="mb-6">
		<span class="text-md font-semi-bold text-gray-800 mb-8">Name:</span>
		<span>{ name }</span>
		<hr class="mt-2"/>
		<table class="table-auto text-sm text-gray-600">
			<tbody>
				<tr>
					<th class="font-semibold text-left pr-4">Type:</th>
					<td>{ result.Type }</td>
				</tr>
			</tbody>
		</table>
		<pre class="text-xs bg-gray-200 p-2 rounded-md">
			<code class="rounded-lg no-shadow language-json">
				{ string(prettyPrint(result.Value)) }
			</code>
		</pre>
	</div>
}

templ actionStepInfoCard(executionId string, stepResult reporter.StepExecutionReport) {
	<div { utils.CreateClassAttrs("relative border bg-gray-50 rounded-lg p-4 mb-4", reportingBorderColorStatus(stepResult.Status))... }>
		@statusIndicator(stepResult.Status)
		<span class="text-md font-bold text-gray-800 mb-8">Action Name:</span>
		<span>{ executionId }</span>
		<hr class="mt-2"/>
		<table class="table-auto text-sm text-gray-600">
			<tbody>
				<tr>
					<th class="font-semibold text-left pr-4">Execution ID:</th>
					<td>{ executionId }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Started:</th>
					<td>{ stepResult.Started.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Ended:</th>
					<td>{ stepResult.Ended.Format(time.ANSIC) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Duration:</th>
					<td>{ formatDuration(stepResult.Started, stepResult.Ended) }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Status:</th>
					<td>{ stepResult.StatusText }</td>
				</tr>
				<tr>
					<th class="font-semibold text-left pr-4">Executed by:</th>
					<td>{ stepResult.ExecutedBy }</td>
				</tr>
			</tbody>
		</table>
		<hr class="mt-2"/>
		{ children... }
	</div>
}

templ actionStepInfoCards(stepResults map[string]reporter.StepExecutionReport) {
	@cards.Card(utils.Class("bg-blue-200 p-4 rounded-lg")) {
		<span class="inline-flex items-center">
			@icons.NewIcon("zap").SetSize("12").InsertIcon("text-blue-600 ")
			<p class="text-sm text-blue-600 mb-1 ml-1">
				Found: { fmt.Sprint(len(stepResults)) } actions 
			</p>
		</span>
		@viewSelector(timelineView(stepResults), detailedView(stepResults))
	}
}

templ timelineView(stepResults map[string]reporter.StepExecutionReport) {
	<div class="relative m-4">
		<ol class="border-s border-gray-200  dark:border-gray-700">
			for executionId, stepResult := range stepResults {
				<li class="mb-5 ms-6">
					<span class="absolute flex items-center justify-center w-6 h-6 rounded-full -start-3 ring-8 ring-white bg-white">
						@indicators.ReportingStatusTagNoText(stepResult.Status)
					</span>
					<h3 class="flex items-center mb-1 text-lg font-semibold text-gray-900 dark:text-white">{ executionId }</h3>
					<time class="block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500">Started: { stepResult.Started.Format(time.ANSIC) }</time>
					<time class="block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500">Duration: {  formatDuration(stepResult.Started, stepResult.Ended) }</time>
				</li>
			}
		</ol>
	</div>
}

templ detailedView(stepResults map[string]reporter.StepExecutionReport) {
	for executionId, stepResult := range stepResults {
		@actionStepInfoCard(executionId, stepResult) {
			@expander() {
				@expandActionInfoCard(stepResult)
			}
		}
	}
}

templ viewSelector(timeline templ.Component, detailed templ.Component) {
	<div x-data="{ selectedTab: 'timeline' }" class="w-full">
		<div @keydown.right.prevent="$focus.wrap().next()" @keydown.left.prevent="$focus.wrap().previous()" class="flex gap-2 overflow-x-auto border-b border-slate-300 dark:border-slate-700" role="tablist" aria-label="tab options">
			<button @click="selectedTab = 'timeline'" :aria-selected="selectedTab === 'timeline'" :tabindex="selectedTab === 'timeline' ? '0' : '-1'" :class="selectedTab === 'timeline' ? 'font-bold text-blue-700 border-b-2 border-blue-700 dark:border-blue-600 dark:text-blue-600' : 'text-slate-700 font-medium dark:text-slate-300 dark:hover:border-b-slate-300 dark:hover:text-white hover:border-b-2 hover:border-b-slate-800 hover:text-black'" class="flex h-min items-center gap-2 px-4 py-2 text-sm" type="button" role="tab" aria-controls="tabpanelTimeline">
				@icons.NewIcon("bar-chart").InsertIcon("")
				Timeline View
			</button>
			<button @click="selectedTab = 'detailed'" :aria-selected="selectedTab === 'detailed'" :tabindex="selectedTab === 'detailed' ? '0' : '-1'" :class="selectedTab === 'detailed' ? 'font-bold text-blue-700 border-b-2 border-blue-700 dark:border-blue-600 dark:text-blue-600' : 'text-slate-700 font-medium dark:text-slate-300 dark:hover:border-b-slate-300 dark:hover:text-white hover:border-b-2 hover:border-b-slate-800 hover:text-black'" class="flex h-min items-center gap-2 px-4 py-2 text-sm" type="button" role="tab" aria-controls="tabpanelDetailed">
				@icons.NewIcon("info").InsertIcon("")
				Detailed View
			</button>
		</div>
		<div class="px-2 py-4 text-slate-700 dark:text-slate-300">
			<div x-show="selectedTab === 'timeline'" id="tabpanelTimeline" role="tabpanel" aria-label="timeline">
				@timeline
			</div>
			<div x-show="selectedTab === 'detailed'" id="tabpanelDetailed" role="tabpanel" aria-label="detailed">
				@detailed
			</div>
		</div>
	</div>
}

func prettyPrint(data string) []byte {
	var prettyJSON map[string]interface{}
	if err := json.Unmarshal([]byte(data), &prettyJSON); err != nil {
		return []byte(fmt.Sprintf("Failed to generate JSON: %s", err))
	}
	returnString, err := json.MarshalIndent(prettyJSON, "", "  ")
	if err != nil {
		return []byte(fmt.Sprintf("Failed to generate JSON: %s", err))
	}
	return returnString
}

func formatDuration(t1 time.Time, t2 time.Time) string {

	duration := t2.Sub(t1)

	if duration.Milliseconds() >= 0 {
		return duration.Round(time.Millisecond).String()
	} else {
		return ""
	}

}

func reportingBorderColorStatus(status string) func(*templ.Attributes) {

	switch status {
	case "successfully_executed":
		return utils.Class("border-emerald-500")
	case "failed":
		return utils.Class("border-red-500")
	case "ongoing":
		return utils.Class("border-orange-500")
	case "server_side_error":
		return utils.Class("border-red-500")
	case "client_side_error":
		return utils.Class("border-red-500")
	case "timeout_error":
		return utils.Class("border-amber-500")
	case "exception_condition_error":
		return utils.Class("border-purple-500")
	default:
		return utils.Class("")
	}
}

func reportingShadowColorStatus(status string) func(*templ.Attributes) {

	switch status {
	case "successfully_executed":
		return utils.Class("shadow-emerald-200")
	case "failed":
		return utils.Class("shadow-red-200")
	case "ongoing":
		return utils.Class("shadow-orange-200")
	case "server_side_error":
		return utils.Class("shadow-red-200")
	case "client_side_error":
		return utils.Class("shadow-red-200")
	case "timeout_error":
		return utils.Class("shadow-amber-200")
	case "exception_condition_error":
		return utils.Class("shadow-purple-200")
	default:
		return utils.Class("")
	}
}
