package layouts

import (
	"soarca-gui/utils"
	"soarca-gui/views/components/headbar"
	"soarca-gui/views/components/icons"
	"soarca-gui/views/components/navbar"
)

const (
	version          = "v0.1"
	title            = "SOARCA-GUI"
	dashboardPath    = "/dashboard"
	documentationUrl = "https://cossas.github.io/SOARCA/docs"
)

type icon struct {
	name string
	css  string
}

type link struct {
	Name string
	Href string
	Icon icon
}

var navBarlinks = []link{
	{Name: "Reporting", Href: "/reporting", Icon: icon{name: "activity", css: "mr-3"}},
	{Name: "Settings", Href: "/settings", Icon: icon{name: "settings", css: "mr-3"}},
}

var headBarlinks = []link{
	{Name: "Account", Href: "/account"},
	{Name: "Settings", Href: "/settings"},
}

templ formatLink(link link, css string) {
	<a href={ templ.URL(link.Href) } { utils.CreateClassAttrs(css)... }>
		{ children... }
		{ link.Name }
	</a>
}

templ formatWithIcon(name string, style string) {
	@icons.NewIcon(name).InsertIcon(style)
}

templ renderLinks(links []link, css string) {
	for _, link := range links {
		@formatLink(link, css) {
			if link.Icon != (icon{}) {
				@formatWithIcon(link.Icon.name, link.Icon.css)
			}
		}
	}
}

templ DashboardLayout() {
	@BaseLayout() {
		<body class="bg-blue-50 dark:bg-black font-family-sans-serif flex">
			@navbar.Navsidebar(title, dashboardPath, version, documentationUrl) {
				@renderLinks(navBarlinks, "flex items-center text-white opacity-75 hover:opacity-100 py-4 pl-6 nav-item")
			}
			<div class="w-full flex flex-col h-screen overflow-y-hidden">
				@headbar.DesktopHeaderBar() {
					@renderLinks(headBarlinks, "block px-4 py-2 account-link hover:text-blue-600")
				}
				@headbar.MobileHeaderBar(dashboardPath) {
					@renderLinks(headBarlinks, "block px-4 py-2 account-link rounded-lg  hover:bg-blue-800 hover:text-white")
				}
				<main class="h-full overflow-y-auto">
					<div class="container px-6 mx-auto grid">
						{ children... }
					</div>
				</main>
			</div>
			<script src="https://cdn.jsdelivr.net/npm/flowbite@2.4.1/dist/flowbite.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<script src="/public/vendor/prism.js"></script>
			@icons.LoadIcons()
			<script>
// Get the theme toggle icons
var themeToggleDarkIcon = document.getElementById("theme-toggle-dark-icon");
var themeToggleLightIcon = document.getElementById("theme-toggle-light-icon");

// Check and apply the theme based on local storage or system preference
if (
    localStorage.getItem("color-theme") === "dark" ||
    (!localStorage.getItem("color-theme") && window.matchMedia("(prefers-color-scheme: dark)").matches)
) {
    document.documentElement.classList.add("dark");
    themeToggleLightIcon.classList.remove("hidden");
    themeToggleDarkIcon.classList.add("hidden");
} else {
    document.documentElement.classList.remove("dark");
    themeToggleLightIcon.classList.add("hidden");
    themeToggleDarkIcon.classList.remove("hidden");
}

// Toggle the theme when the button is clicked
var themeToggleBtn = document.getElementById("theme-toggle");

themeToggleBtn.addEventListener("click", function () {
    // Toggle the icons
    themeToggleDarkIcon.classList.toggle("hidden");
    themeToggleLightIcon.classList.toggle("hidden");

    // Toggle the dark class and update local storage
    if (document.documentElement.classList.contains("dark")) {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
    } else {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
    }
});

</script>
		</body>
	}
}
